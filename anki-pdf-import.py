#!/usr/bin/env python3
DESCRIPTION = "Create an Anki import file from a UCLA photo roster PDF file"
EPILOG = """
This program will extract student names, ID numbers, and photos from a UCLA 
photo roster (in PDF format, as can be downloaded from my.ucla), and allow them 
to be imported into Anki. For this to work correctly, you must use the large 
format photo roster with 6 students per page, not the smaller format with 30 
students per page. 

The student photos that are extracted from the PDF file will be placed directly 
in your Anki data folder, in the collection.media subfolder where they belong. 
Each photo will be named "UCLA_Student_xxx-xxx-xxx.png", where the x's are the 
student's 9-digit student ID number. If this file already exists and is not 
identical to the new one, then the existing file will be left in place, and the 
new one will be put in the same folder, but with a name of 
"UCLA_Student_xxx-xxx-xxx.new.png". (This functionality should be improved in a 
later version.) 

If you already have some of these same students in your Anki collection (for 
example, if you've already imported this class, but you're re-importing it 
because some students have added/dropped the class, or if you keep your former 
students in the collection, and some of those former students are in this class 
as well) then you probably want this program to keep the changes that you've 
made rather than overwriting them. To do that, first export your whole 
collection of students from Anki into a text file. (Select the deck you want to 
export, select "Export" from the menu, and select the "Notes in plain text" 
format.) Then when you run this program, use the name of that text file as the 
(optional) "existing" argument. 
"""

import os
import argparse

from photoroster import load_existing_students, photo_roster_iterator


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION, epilog=EPILOG, 
            formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument("photoroster", 
        help="""Name of the PDF file containing the photo roster, as downloaded 
            from my.ucla. Note that this must be in the "large" format, with 6 
            photos per page, rather than 30 photos per page. A new text file 
            will be created, with the same name as this file and in the same 
            directory, but with the ".pdf" extension replaced by 
            ".Anki_Import.txt". You can then import this file into Anki.""")
    parser.add_argument("ankidir", 
        help="""The directory where your personal Anki files are stored. On a 
            Mac or Linux system, this will usually be ~/Anki/[YOUR NAME]/""")
    parser.add_argument("existing", nargs="?", default=None, 
        help="""Text file (tab separated) containing the existing names from 
            Anki. If this is given, any student ID numbers from the new roster 
            that match existing entries will be merged together with the data 
            from the existing entries (particularly the tags). In case of 
            conflicts, the user will be prompted. This file can easily be 
            generated by doing an export from Anki, and choosing the "Notes in 
            plain text" format.""")
    return parser.parse_args()


##### The following functions should probably be customized further #####
def check_existing(student, existing_students):
    existing = existing_students.get(student.idnumber)
    if not existing:
        return
    preferredname, fullname, tags = existing
    if preferredname != student.preferredname or fullname != student.fullname:
        print("WARNING: Names don't match up for {}:".format(student.idnumber))
        if preferredname != student.preferredname:
            print("    Preferred name in Anki is {}, new one is {}.".format(
                    preferredname, student.preferredname))
        if fullname != student.fullname:
            print("    Full name in Anki is {}, new one is {}.".format(
                    fullname, student.fullname))
        print("    Keeping the names in Anki. You may want to change this.")
        student.preferredname = preferredname
        student.fullname = fullname
    student.merge_tags(tags.split())


def warn_user_callback(student, oldpath, newpath):
    root, extension = os.path.splitext(oldpath)
    n = 1
    while True:
        new_oldpath = "{}.old{}{}".format(root, n, extension)
        if not os.path.exists(new_oldpath):
            break
        n += 1
    os.rename(oldpath, new_oldpath)
    os.rename(newpath, oldpath)
    print("WARNING: A different photo already exists for {}.".format(
            student.preferredname))
    print("    Leaving both in the photos directory.")
    print("    The old one is {}.".format(new_oldpath))
    print("    The new one is {}.".format(oldpath))


if __name__ == "__main__":
    args = parse_args()
    if args.photoroster.lower()[-4:] != ".pdf":
        raise ValueError("{} does not appear to be a PDF file".format(
                args.photoroster))
    ankifilepath = args.photoroster[:-4] + ".Anki_Import.txt"
    photodir = os.path.join(args.ankidir, "collection.media")
    if not os.path.isdir(photodir):
        raise FileNotFoundError("Directory {} does not exist".format(photodir))
    existing_students = load_existing_students(args.existing)
    with open(ankifilepath, "w") as ankifile:
        for student in photo_roster_iterator(args.photoroster):
            student.save_image(photodir, duplicate_callback=warn_user_callback)
            check_existing(student, existing_students)
            print(student, file=ankifile)


